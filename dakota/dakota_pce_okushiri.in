
# Call with 'dakota -i dakota_pce_okushiri.in'

# perform pce on python-given function
environment
    output_precision = 16
    # Write output to file instead of printing it in console
    # output_file = '/home/rehmemk/git/anugasgpp/Okushiri/dakota/output.txt'
    results_output 		# write the results to a file
        hdf5				# write results in hdf5 format instead of plain txt.
            model_selection
                top_method
                #  all_methods
                # all
                #  none
            interface_selection
                #  simulation
                # all
                none
            # name of the results file                
            results_output_file = '/home/rehmemk/git/anugasgpp/Okushiri/dakota/data/results_Okushiri_6D_R64_level4'

method
    id_method = 'Polynomial Chaos'
    polynomial_chaos
    # stoch_collocation
    # quadrature_order = 100		# full Gauss quadrature
    sparse_grid_level = 4
    
    # variance_based_decomp   # calculate Sobol indices
    output silent			#do not print the individual function evaluations
    convergence_tolerance = 1.e-16

# export coefficients of PCE to file
# export_expansion_file = '/home/rehmemk/git/anugasgpp/Okushiri/dakota/data/result_pce_coeff.dat'

# evaluate the PCE at points given through file
import_approx_points_file = '/home/rehmemk/git/anugasgpp/Okushiri/dakota/data/evalPoints6D_R64_10000.dat'
export_approx_points_file = '/home/rehmemk/git/anugasgpp/Okushiri/dakota/data/evaluations_Okushiri_6D_R64_level4.dat'


variables
    uniform_uncertain = 6
         lower_bounds = 0.5		0.5		0.5     0.5		0.5		0.5
         upper_bounds = 1.5		1.5		1.5     1.5		1.5     1.5
         descriptors =	'x1'	'x2'	'x3'    'x4'	'x5'	'x6'
	#normal_uncertain = 6
	#	means 			= 1.0       1.0     1.0	    1.0       1.0     1.0	     #1.0     1.0
	#	std_deviations	= 0.125      0.125    0.125    0.125      0.125 0.125    #0.125    0.125
	#	lower_bounds 	= 0.5       0.5      0.5    0.5       0.5      0.5       #0.5      0.5
	#	upper_bounds 	= 1.5       1.5     1.5     1.5       1.5     1.5        #1.5     1.5
	#	descriptors		= 'x1'      'x2'    'x3'    'x4'      'x5'    'x6'       #'x7'    'x8'
# 	lognormal_uncertain = 1
# 		lambdas			= 7.71
# 		zetas		 	=  1.0056 
# 		lower_bounds	= 100.0
# 		upper_bounds 	= 50000.0
# 		descriptors	 	= 'x2'

interface
    fork
        analysis_drivers = 'okushiri_for_dakota_64.py'

responses
# dimensionality of the output
response_functions = 451
no_gradients
no_hessians
    